/*   Copyright 2018-2021 Prebid.org, Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */

#import "PBMCircularProgressBarView.h"
#import "PBMCircularProgressBarLayer.h"

@interface PBMCircularProgressBarView ()
@property NSDate *startTime;
@property NSTimeInterval refreshInterval;  // refresh every n seconds.
@end

@implementation PBMCircularProgressBarView  //!OCLINT(too many methods - 35)

-(instancetype)initWithCoder:(NSCoder *)coder{
    self = [super initWithCoder:coder];
    if (self) {
        [self initView];
    }
    return self;
}

-(instancetype)init{
    self = [super init];
    if (self) {
        [self initView];
    }
    return self;
}

-(instancetype)initWithFrame:(CGRect)frame{
    self = [super initWithFrame:frame];
    if (self) {
        [self initView];
    }
    return self;
}

-(void)initView {
    //Without setting the content scale factor the layer would be pixelated
    [self setContentScaleFactor:[[UIScreen mainScreen] scale]];
    
    //This mode forces redrawing when bounds change (e.g. bounds change in animation)
    [self setContentMode:UIViewContentModeRedraw];
    self.backgroundColor = [UIColor blackColor];

    [self setProgressRotationAngle:50.f];
    [self setProgressColor:[UIColor lightGrayColor]];
    [self setValue:0.f];
    [self setMaxValue:100.f];
    [self setEmptyLineColor:[UIColor lightGrayColor]];
    [self setEmptyLineStrokeColor:[UIColor lightGrayColor]];
    [self setFontColor:[UIColor lightGrayColor]];
    [self setEmptyLineWidth:1.f];
    [self setProgressLineWidth:5.f];
    [self setProgressAngle:100.f];
    [self setValueFontSize:24.f];
    [self setShowValueString:YES];
    [self setValueFontName:@"HelveticaNeue-Thin"];
    [self setCountdown:NO];
    
    [self setIsAccessibilityElement:YES];
    [self setAccessibilityLabel:@"CircularProgressView"];
    [self setAccessibilityValue:@"0"];
    [self setAccessibilityTraits:UIAccessibilityTraitButton];
}

#pragma mark - Getters and Setters for layer properties

-(void)setShowValueString:(BOOL)showValueString{
  self.progressLayer.showValueString = showValueString;
  [self.layer setNeedsDisplay];
}

-(BOOL)showValueString{
  return self.progressLayer.showValueString;
}

-(void)setValue:(CGFloat)value{
    self.progressLayer.value = value;
    NSString *strValue = [NSString stringWithFormat:@"%.0f", value];
    [self setAccessibilityValue: strValue];
    
    //CALayer autogenerated setter using @dynamic doesn't refresh the layer when the value is 0
    if(value == 0) {
        [self.layer setNeedsDisplay];
    }
}

-(CGFloat)value{
    return self.progressLayer.value;
}

-(void)setMaxValue:(CGFloat)maxValue{
    self.progressLayer.maxValue = maxValue;
    //CALayer autogenerated setter using @dynamic doesn't refresh the layer when the value is 0
    if(maxValue == 0){
        [self.layer setNeedsDisplay];
    }
}

-(CGFloat)maxValue{
    return self.progressLayer.maxValue;
}

-(void)setProgressLineWidth:(CGFloat)width{
    self.progressLayer.progressLineWidth = width;
}

-(CGFloat)progressLineWidth{
    return self.progressLayer.progressLineWidth;
}

-(void)setProgressLinePadding:(CGFloat)padding{
    self.progressLayer.progressLinePadding = padding;
}

-(CGFloat)progressLinePadding{
    return self.progressLayer.progressLinePadding;
}

-(void)setEmptyLineWidth:(CGFloat)width{
    self.progressLayer.emptyLineWidth = width;
}

-(CGFloat)emptyLineWidth{
    return self.progressLayer.emptyLineWidth;
}

-(void)setProgressColor:(UIColor*)color{
    self.progressLayer.progressColor = color;
}

-(UIColor*)progressColor{
    return self.progressLayer.progressColor;
}

-(void)setValueFontSize:(CGFloat)valueFontSize{
    self.progressLayer.valueFontSize = valueFontSize;
}

-(CGFloat)valueFontSize{
    return self.progressLayer.valueFontSize;
}

-(void)setFontColor:(UIColor*)color{
    self.progressLayer.fontColor = color;
}

-(UIColor*)fontColor{
    return self.progressLayer.fontColor;
}

-(void)setEmptyLineColor:(UIColor *)emptyLineColor{
    self.progressLayer.emptyLineColor = emptyLineColor;
}

-(UIColor*)emptyLineColor{
    return self.progressLayer.emptyLineColor;
}

-(void)setProgressAngle:(CGFloat)progressAngle{
    self.progressLayer.progressAngle = progressAngle;
}

-(CGFloat)progressAngle{
    return self.progressLayer.progressAngle;
}

-(void)setProgressRotationAngle:(CGFloat)progressRootationAngle{
    self.progressLayer.progressRotationAngle = progressRootationAngle;
}

-(CGFloat)progressRotationAngle{
    return self.progressLayer.progressRotationAngle;
}

-(void)setValueFontName:(NSString *)valueFontName{
  self.progressLayer.valueFontName = valueFontName;
}

-(NSString *)valueFontName{
    return self.progressLayer.valueFontName;
}

-(void)setCountdown:(BOOL)countdown {
    self.progressLayer.countdown = countdown;
}

-(BOOL)countdown {
    return self.progressLayer.countdown;
}

#pragma mark - CALayer

-(PBMCircularProgressBarLayer*)progressLayer{
    PBMCircularProgressBarLayer* layer = (PBMCircularProgressBarLayer*) self.layer;
    return layer;
}

+ (Class) layerClass {
    return [PBMCircularProgressBarLayer class];
}

// Update the progress manually using the value.
// note that this method is used *instead* of start() and startWithDuration().
- (void) updateProgress: (CGFloat) value {
    self.maxValue = self.duration;
    self.value = value;
}


@end
